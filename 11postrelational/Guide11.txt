Guide 11
Ethan Clark
CS 342
April 17, 2017

	1. Read "Your First Cup: An Introduction to the Java EE Platform" - Focus on Chapter 2, "Understanding Java Platform, Enterprise
	Edition"
	
		a. Explain the tiers discussed in the article. On which does J2EE focus? On which does the Oracle database focus?
			i. The Client Tier
				1) Consists of a client program that makes requests to the middle tier.
				2) Consists of application clients that access a Java EE server and that are usually located on a different machine
				from the server.
				3) The clients make requests to the server. The server processes the requests and returns a response back to the client.
				4) Clients can be a web browser, a standalone application, or other servers, and they run on a different machine from
				the Java EE server.
			ii. The Middle Tier *** (This is where Java EE application development focuses to make enterprise application management
			easier, more robust, and more secure.)
				1) The Web Tier
					a) Consists of components that handle the interaction between clients and the business tier.
					b) Its primary tasks are the following:
						i) Dynamically generate content in various formats for the client.
						ii) Collect input from users of the client interface and return appropriate results from the components in the
						business tier.
						iii) Control the flow of screens or pages on the client.
						iv) Maintain the state of data for a user's session.
						v) Perform some basic logic and hold some data temporarily in managed beans.
					c) Some of the main Java EE technologies that are used in the web tier of Java EE applications:
						i) JavaServer Faces technology
						ii) Expression Language
						iii) Servlets
						iv) Contexts and Dependency Injection for Java EE
				2) The Business Tier
					a) Consists of components that provide the business logic for an application.
						i) Business logic is code that provides functionality to a particular business domain, like the financial
						industry, or an e-commerce site.
					b) In a properly designed enterprise application, the core functionality exists in the business tier components.
					c) The following Java EE technologies are among those that are used in the business tier in Java EE applications:
						i) Enterprise JavaBeans (enterprise beans) components
						ii) JAX-RS RESTful web services
						iii) Java Persistence API entities
			iii. The Enterprise Information Systems Tier *** (This is where the Oracle database focuses.)
				1) Consists of database servers, enterprise resource planning systems, and other legacy data sources, like mainframes.
				2) These resources typically are located on a separate machine from the Java EE server, and are accessed by components
				on the business tier.
				3) The following Java EE technologies are used to access the EIS tier in Java EE applications:
					a) The Java Database Connectivity API (JDBC)
					b) The Java Persistence API
					c) The Java EE Connector Architecture
					d) The Java Transaction API (JTA)
				
		b. Explain the nature of a J2EE container. What sort of containers are there?
			i. Java EE containers are the interface between the component and the lower-level functionality provided by the platform to
			support that component.
				1) The functionality of the container is defined by the platform and is different for each component type.
			ii. Types of Containers:
				1) The Web Container
					a) The web container is the interface between web components and the web server.
						i) A web component can be a servlet or a JavaServer Faces Facelets page.
					b) The container manages the component's lifecycle, dispatches requests to application components, and provides
					interfaces to context data, such as information about the current request.
				2) The EJB Container
					a) The EJB container is the interface between enterprise beans, which provide the business logic in a Java EE
					application, and the Java EE server. 
					b) The EJB container runs on the Java EE server and manages the execution of an application's enterprise beans.
				3) The Application Client Container
					a) The application client container is the interface between Java EE application clients (special Java SE
					applications that use Java EE server components) and the Java EE server.
					b) The application client container runs on the client machine and is the gateway between the client application
					and the Java EE server components that the client uses.
					
	2. Read "The Java EE Tutorial" - This tutorial provides extensive material on J2EE; focus on the sections listed here.
	
		a. Sections 1.7 - 1.8, "Java EE 7 APIs" - Explain the purpose of these technologies (only): JPA, JTA, JAX-RS, JDBC, JAXB.
			i. JPA
				1) Java Persistence API
				2) JPA is a Java standards-based solution for persistence. Persistence uses an object/relational mapping approach to
				bridge the gap between an object-oriented model and a relational database.
			ii. JTA
				1) Java Transaction API
				2) JTA provides a standard interface for demarcating transactions.
					a) The Java EE architecture provides a default auto commit to handle transaction commits and rollbacks. An auto
					commit means that any other applications that are viewing data will see the updated data after each database read
					or write operation.
					b) However, if your application performs two separate database access operations that depend on each other, you
					will want to use the JTA API to demarcate where the entire transaction, including both operations, begins, rolls
					back, and commits.
			iii. JAX-RS
				1) Java API for RESTful Web Services
				2) JAX-RS defines APIs for the development of web services built according to the Representational State Transfer 
				REST) architectural style.
				3) A JAX-RS application is a web application that consists of classes packaged as a servlet in a WAR file along with
				required libraries.
			iv. JDBC
				1) Java Database Connectivity
				2) JDBC API lets you invoke SQL commands from Java programming language methods.
				3) You use the JDBC API in an enterprise bean when you have a session bean access the database.
				4) You can also use the JDBC API from a servlet or a JSP page to access the database directly without going through an
				enterprise bean.
				5) The JDBC API has two parts:
					a) An application-level interface used by the application components to access a database.
					b) A service provider interface to attach a JDBC driver to the Java EE platform.
			v. JAXB
				1) Java API for XML Processing
				2) JAXB is a part of the Java SE platform.
				3) It supports the processing of XML documents using Document Object Model (DOM), Simple API for XML (SAX), and
				Extensible Stylesheet Language Transformations (XSLT).
				4) JAXP enables applications to parse and transform XML documents independently of a particular XML-processing
				implementation.
			
		b. Section 5, "Packing Applications" - Compare and contrast JARs, WARs, & EARs.
			i. A Java EE application is delivered in a Java Archive (JAR) file, a Web Archive (WAR) file, or an Enterprise Archive 
			EAR) file.
			ii. A WAR or EAR file is a standard JAR (.jar) file with a .war or .ear extension.
			iii. Using JAR, WAR, and EAR files and modules makes it possible to assemble a number of different Java EE applications
			using some of the same components.
				1) No extra coding is needed; it is only a matter of assembling (or packaging) various Java EE modules into Java EE
				JAR, WAR, or EAR files.
			iv.  EARs
				1) EARs contain Java EE modules and, optionally, deployment descriptors.
					a) A deployment descriptor, an XML document with an .xml extension, describes the deployment settings of an
					application, a module, or a component. Because deployment descriptor information is declarative, it can be changed
					without the need to modify the source code. At runtime, the Java EE server reads the deployment descriptor and acts
					upon the application, module, or component accordingly.
			v. JARs
				1) A Java EE module consists of one or more Java EE components for the same container type and, optionally, one
				component deployment descriptor of that type.
				2) EJB modules, which contain class files for enterprise beans and, optionally, an EJB deployment descriptor. EJB
				modules are packaged as JAR files with a .jar extension.
				3) Application client modules, which contain class files and, optionally, an application client deployment descriptor.
				Application client modules are packaged as JAR files with a .jar extension.
			vi. WARs
				1) Web modules, which contain servlet class files, web files, supporting class files, GIF and HTML files, and,
				optionally, a web application deployment descriptor. Web modules are packaged as JAR files with a .war (web archive)
				extension.
				
	3. Review these tutorials on which the lab is based: "Developing a Java EE Application" & "Creating and Running Your First RESTful
	Web Service"
	
		a. Identify the IDE we'll use for J2EE development.
			i. Intellij IDEA is the IDE we will use for J2EE development
			
		b. Identify the roles of the following technologies in the J2EE application: J2SE's JDK, GlassFish.
			i. JS2E's JDK
				1) The Java Development Kit (JDK) is a software development environment used for developing Java applications and
				applets. It includes the Java Runtime Environment (JRE), an interpreter/loader (java), a compiler (javac), an archiver 
				jar), a documentation generator (javadoc) and other tools needed in Java development.
			ii. GlassFish
				1) GlassFish is the reference implementation of Java EE and as such supports Enterprise JavaBeans, JPA, JavaServer
				Faces, JMS, RMI, JavaServer Pages, servlets, etc.
					a) This allows developers to create enterprise applications that are portable and scalable, and that integrate with
					legacy technologies.
					
		c. Explain the nature of a RESTful web service.
			i. REST defines a set of architectural principles by which you can design Web services that focus on a system's resources,
			including how resource states are addressed and transferred over HTTP by a wide range of clients written in different
			languages.
			ii. Four Basic Design Principles:
				1) Use HTTP methods explicitly.
					a) To create a resource on the server, use POST.
					b) To retrieve a resource, use GET.
					c) To change the state of a resource or to update it, use PUT.
					d) To remove or delete a resource, use DELETE.
				2) Be stateless.
				3) Expose directory structure-like URIs.
				4) Transfer XML, JavaScript Object Notation (JSON), or both.
