Guide 09
CS 342
Ethan Clark
April 4, 2017

Work through the following materials this week, making sure that you can do the given activities.

	1. Chapter 17
		a. B+ Trees - Focus on the Section 17.3 (skipping the material on algorithms).
			i. Compare and contrast B-trees and B+-trees.
				1) B-trees and B+-trees are special cases of the well-known search data structure known as a tree.
					a) A tree is formed of nodes. Each node in the tree, except for a special node called the root, has one parent
					node and zero or more child nodes. The root node has no parent. A node that does not have any child nodes is
					called a leaf node; a non-leaf node is called an internal node.
					b) The level of a node is always one more than the level of its parent, with the level of the root node being
					zero.
					c) A subtree of a node consists of that node and all its descendent nodes - its child nodes, the child nodes of
					its child nodes, and so on.
					d) A search tree is a special type of tree that is used to guide the search for a record, given the value of one
					of the record's fields.
						i) A search tree of order p is a tree such that each node contains at most p-1 search values and p pointers
						in the order <P1, K1, P2, K2, …, Pq-1, Kq-1, Pq>, where q <= p.
						ii) Each Pi is a pointer to a child node (or a NULL pointer), and each Ki is a search value from some order
						set of values. All search values are assumed to be unique.
						iii) Two constraints must hold at all times on the search tree:
							A. Within each node, K1 < K2 < … < Kq-1.
							B. For all values X in the subtree pointed at by Pi, we have Ki-1 < X < Ki for 1 < i < q; X < Ki for i =
							1; and Ki-1 < X for i = q.
				2) The B-tree has additional constraints that ensure that the tree is always balanced and that the space wasted by
				deletion, if any, never becomes excessive.
					a) More formally, a B-tree of order p, when used as an access structure on a key field to search for records in a
					data file, can be defined as follows:
						i) Each internal node in the B-tree is of the form:
							<P1, <K1, Pr1>, P2, <K2, Pr2>, …, <Kq-1, Prq-1>, Pq>
						Where q <= p. Each Pi is a tree pointer - a pointer to another node in the B-tree. Each Pri is a data pointer
						- a pointer to the record whose search key field value is equal to Ki (or to the data file block containing
						that record).
						ii) Within each node, K1 < K2 < … < Kq-1.
						iii) For all search key field values X in the subtree pointed at by Pi (the ith subtree,), we have:
							Ki-1 < X < Ki for 1 < i < q; X < Ki for i = 1; and Ki-1 < X for i = q.
						iv) Each node has at most p tree pointers.
						v) Each node, except the roof and leaf nodes, has at least ceiling(p/2) tree pointers. The root node has at
						least two tree pointers unless it is the only node in the tree.
						vi) A node with q tree pointers, q <= p, has q - 1 search key field values (and hence q -1 data pointers).
						vii) All leaf nodes are at the same level. Leaf nodes have the same structure as internal nodes except that
						all of their tree pointers Pi are NULL.
				3) Most implementations of a dynamic multilevel index use a variation of the B-tree data structure called a B+-tree.
					a) In a B-tree, every value of the search field appears once at some level in the tree, along with a data pointer.
					b) In a B+-tree, data pointers are stored only at the leaf nodes of the tree; hence, the structure of leaf nodes
					differs from the structure of internal nodes.
						i) The leaf nodes have an entry for every value of the search field, along with a data pointer to the record 
						or to the block that contains this record) if the search field is a key field.
						ii) For a non-key search field, the pointer points to a block containing pointers to the data file records,
						creating an extra level of indirection.
					c) The structure of the internal nodes of a B+-tree of order p is as follows:
						i) Each internal node is of the form
						<P1, K1, P2, K2, …, Pq-1, Kq-1, Pq>, where q <= p and each Pi is a tree pointer.
						ii) Within each internal node, K1 < K2 < … < Kq-1.
						iii) For all search field values X in the subtree pointed at by Pi, we have Ki-1 < X <= Ki for 1 < i < q; X
						<= Ki for i = 1; and Ki-1 < X for i = q.
						iv) Each internal node has at most p tree pointers.
						v) Each internal node, except the root, has at least ceiling(p/2) tree pointers. The root node has at least
						two tree pointers if it is an internal node.
						vi) An internal node with q pointers, q <= p, has q - 1 search field values.
					d) The structure of leaf nodes of a B+-tree of order p is as follows:
						i) Each leaf node is of the form
						<<K1, Pr1>, <K2, Pr2>, …, <Kq-1, Prq-1>, Pnext>
						where q <= p, each Pri is a data pointer, and Pnext points to the next leaf node of the B+-tree.
						ii) Within each leaf node, K1 <= K2, …, Kq-1, where q <= p.
						iii) Each Pri is a data pointer that points to the record whose search field value is Ki of to a file block
						containing the record (or to a block of record pointers that point to records whose search field value is Ki
						if the search field is not a key).
						iv) Each leaf node has at least ceiling(p/2) values.
						v) All leaf nodes are at the same level.
						
			ii. Explain what it means for such a tree to be balanced.
				1) A search tree is balanced if all of its leaf nodes are at the same level.
					a) The goals for balancing a search tree are as follows:
						i) To guarantee that nodes are evenly distributed, so that the depth of the tree is minimized for the given
						set of keys and that the tree does not get skewed with some nodes being at very deep levels.
						ii) To make the search speed uniform, so that the average time to find any random key is roughly the same.
						
			iii. Compare and contrast tree and data pointers.
				1) The pointers in internal nodes are tree pointers to block that are tree nodes.
				2) The pointers in leaf nodes are data pointers to the data file records or blocks - except for the Pnext pointer,
				which is a tree pointer to the next leaf node.
				
		b. Explain the nature of multiple-attribute indexes (see the Introduction to Section 17.4).
			i. In many retrieval and update requests, multiple attributes are involved. If a certain combination of attributes is
			used frequently, it is advantageous to set up an access structure to provide efficient access by a key value that is a
			combination of those attributes.
			ii. We will refer to keys containing multiple attributes as composite keys.
			iii. Techniques:
				1) Order index on multiple attributes
					a) Lexicographic ordering works similarly to order of character strings.
					b) An index on a composite key of n attributes works similarly to any index discussed in this chapter so far.
				2) Partitioned Hashing
					a) Partitioned hashing is an extension of static external hashing that allows access on multiple keys.
					b) In partitioned hashing, for a key consisting of n components, the hash function is designed to produce a
					result with n separate hash addresses. The bucket address is a concatenation of these n addresses.
					c) It is then possible to search for the required composite search key by looking up the appropriate buckets that
					match the parts of the address in which we are interested.
				3) Grid Files
					a) The grid file concept can be applied to any number of search keys.
						i) For example, for n search keys, the grid array would have n dimensions.
						ii) The grid array thus allows a partitioning of the file along the dimensions of the search key attributes
						and provides an access by combinations of values along those dimensions.
					b) Grid files perform well in terms of reduction in time for multiple key access.
					c) However, they represent a space overhead in terms of the grid array structure. Moreover, with dynamic files, a
					frequent reorganization of the file adds to the maintenance cost.
					
		c. Explain the nature of hash and bitmap indexes (see Sections 17.5.1-2).
			i. Hash Indexes
				1) It is also possible to create access structures similar to indexes that are based on hashing.
				2) The hash index is a secondary structure to access the file by using hashing on a search key other than the one
				used for the primary data file organization.
				3) The index entries are of the type <K, Pr> or <K, P>, where Pr is a pointer to the record containing the key, or P
				is a pointer to the block containing the record for that key.
			ii. Bitmap Indexes
				1) The bitmap index is another popular data structure that facilitates querying on multiple keys.
				2) Bitmap indexing is used for relations that contain a large number of rows. It creates an index for one or more
				columns, and each value or value range in those columns is indexed.
					a) Typically, a bitmap index is created for those columns that contain a fairly small number of unique values.
				3) To build a bitmap index on a set of records in a relation, the records must be numbered from 0 to n with an id (a
				record id or a row id) that can be mapped to a physical address made of a block number and a record offset within the
				block.
				4) A bitmap index is built on one particular value of a particular field (the column in a relation) and is just an
				array of bits.
					a) Thus, for a given field, there is one separate bitmap index (or a vector) maintained corresponding to each
					unique value in the database.
					
		d. Physical Database Design - Focus on the Section 17.7
			i. Explain the concept of physical database design (PDD).
				1) Physical design is an activity where the goal is not only to create the appropriate structuring of data in
				storage, but also to do so in a way that guarantees good performance.
					a) For a given conceptual schema, there are many physical design alternatives in a given DBMS. It is not possible
					to make meaningful physical design decisions and performance analyses until the database designer knows the mix
					of queries, transactions, and applications that are expected to run on the database.
				2) Physical Database Design Factors
					a) Analyzing the database queries and transactions
					b) Analyzing the expected frequency of invocation of queries and transactions
					c) Analyzing the time constraints of queries and transactions
					d) Analyzing the expected frequencies of update operations
					e) Analyzing the uniqueness constraints on attributes
				3) The physical design decisions for indexing fall into the following categories:
					a) Whether to index an attribute
						i) The general rules for creating an index on an attribute are that the attribute must either be a key 
						unique), or there must be some query that uses that attribute either in a selection condition (equality or
						range of values) or in a join condition.
					b) What attribute or attributes to index on
					c) Whether to set up a clustered index
						i) At most, one index per table can be a primary or clustering index, because this implies that the file by
						physically ordered on that attribute.
					d) Whether to use a hash index over a tree index.
					e) Whether to use dynamic hashing for the file.
			ii. Compare and contrast the uses for B-tree, hash, and bitmap indexes in PDD.
				1) In general, RDBMS's (relational database management systems) use B+-trees for indexing. However, ISAM and hash
				indexes are also provided in some systems.
				2) B+-trees support both equality and range queries on the attribute used as the search key.
				3) Hash indexes work well with equality conditions, particularly during joins to find a matching record(s), but they
				do not support range queries.
				
			iii. Explain whether denormalization should be considered a form of PDD.
				1) I think that yes, denormalization should be considered a form of PDD. According to the physical database design
				factors I listed above in part 1 of part d, one would need to consider all those things like analyzing queries, the
				expected frequencies of those queries, etc., which all should be considered when one would be considering
				denormalizing (or even normalizing) a database design. Physical database design does not just focus on the actual
				data storage, but doing so in an appropriate way, which denormalizing or normalizing could help do.
			
	2. Chapter 18
		a. Explain the concept of query optimization (see the introduction to the chapter).
			i. A query expressed in a high-level query language such as SQL must first be scanned, parsed, and validated.
				1) The scanner identifies the query tokens - such as SQL keywords, attribute names, and relation names - that appear 
				in the text of the query.
				2) The parser checks the query syntax to determine whether it is formulated according to the syntax rules (rules of
				grammar) of the query language.
				3) The query must also be validated by checking that all attribute and relation names are valid and semantically
				meaningful names in the schema of the particular database being queried.
			ii. An internal representation of the query is then created, usually as a tree data structure called a query tree. It is
			also possible to represent the query using a graph data structure called a query graph, which is generally a directed
			acyclic graph (DAG).
			iii. The DBMS must then devise an execution strategy or query plan for retrieving the results of the query form the
			database files.
			iv. A query has many possible execution strategies, and the process of choosing a suitable one for processing a query is
			known as query optimization.
				1) The query optimizer module has the task of producing a good execution plan, and the code generator generates the
				code to execute that plan.
				2) The runtime database processor has the task of running (executing) the query code, whether in compiled or
				interpreted mode, to produce the query result.
					a) If a runtime error results, an error message is generated by the runtime database processor.
				3) The term optimization is actually a misnomer because in some cases the chosen execution plan is not the optimal 
				or absolute best) strategy - it is just a reasonably efficient or the best available strategy for executing the query.
					a) Finding the optimal strategy is usually too time-consuming - except for the simplest of queries.
					b) Hence, planning of a good execution strategy may be a more accurate description than query optimization.
		
	3. Oracle's EXPLAIN PLAN
		a. Load the small version of the Internet Movie DB defined in the repo (cs342/databases/imdb), configure the auto-trace
		facility in SQL *Plus (SET SERVEROUTPUT ON; & SET AUTOTRACE ON;) and generate an execution plan for some simply query. What
		is the execution plan operation used and what does that operation do?
		b. Explain at least the following operations (see Oracle Execution Plan Operations).
			i. TABLE ACCESS FULL
			ii. TABLE ACCESS BY INDEX
			iii. NESTED LOOPS
			iv. HASH JOIN
			v. INDEX UNIQUE SCAN
	For Oracle's reference documentation, see Database Performance Tuning Guide, particularly the "Using EXPLAIN PLAN" section. Note
	that the text also explains these operations conceptually in Chapter 18.
