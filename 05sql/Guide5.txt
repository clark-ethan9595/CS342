	1. Basic SQL (Section 6.3) — Review basic SQL as needed, then write sample queries that:
		a. Use one or more tuple variables (Section 6.3.2).
			i. Example: Query 8 (page 191)
				1) SELECT E.Fname, E.Lname, S.Fname, S.Lname FROM EMPLOYEE AS E, EMPLOYEE AS S WHERE E.Super_ssn = S.ssn;
					a) In this case, we are required to declare alternative relation names E and S, called aliases or tuple variables, for the EMPLOYEE relation. An alias can follow the keyword AS or it can directly follow the relation name - for example, by writing EMPLOYEE E, EMPLOYEE S in the FROM clause of query 8.
					b) In this query, we can think of E and S as two different copies of the EMPLOYEE relation; the first, E, represents employees in the role of supervisors or subordinates; the second, S, represents employees in the role of supervisors.
			ii. Example: Query 1B (page 192)
				1) SELECT E.Fname, E.Lname, E.Address FROM EMPLOYEE AS E, DEPARTMENT AS D WHERE D.Dname = 'Research' AND D.Dnumber = E.Dno;
					a) We can use this alias-naming or renaming mechanism in any SQL query to specify tuple variables for every table in the WHERE clause, whether or not the same relation needs to be referenced more than once. In fact, this practice is recommended since it results in queries that are easier to comprehend.
				
		b. Use one or more of the set operations, e.g., UNION, EXCEPT, INTERSECT (Section 6.3.4).
			i. Example: Query 4 (page 195)
				1) (SELECT DISTINCT Pnumber FROM PROJECT, DEPARTMENT, EMPLOYEE WHERE Dnum = Dnumber AND Mgr_ssn = Ssn AND Lname='Smith')
				UNION
				(SELECT DISTINCT Pnumber FROM PROJECT, WORKS_ON, EMPLOYEE WHERE Pnumber = Pno AND Essn = Ssn AND Lname = 'Smith');
					a) The first SELECT query retrieves the projects that involve a "Smith" as manager of the department that controls the project, and the second retrieves the projects that involve a "Smith" as a worker on the project. Notice that if several employees have the last name "Smith," the project names involving any of them will be retrieved. Applying the UNION operation to the two SELECT queries gives the desired result.
					
	2. Advanced SQL (Sections 7.1.1–7.1.5) — This will include more new material; write sample queries that:
		a. Select based on a NULL field value (Section 7.1.1).
			i. Example: Query 18 (page 209)
				1) SELECT Fname, Lname FROM EMPLOYEE WHERE Super_ssn IS NULL;
					a) SQL allows queries that check whether an attribute is NULL. Rather than using = or <> to compare an attribute value to NULL, SQL uses the comparison operators IS and IS NOT. This is because SQL considers each NULL value as being distinct from every other NULL value, so equality comparison is not appropriate. It follows that when a join condition is specified, tuples with NULL values for the join attributes are not included in the result.
		
		b. Implement a nested sub-query, using [NOT] EXISTS, IN, ANY or ALL (Sections 7.1.2–7.1.4).
			i. Example: Query 4A (page 210)
				1) SELECT DISTINCT Pnumber FROM PROJECT WHERE Pnumber IN
					(SELECT Pnumber FROM PROJECT, DEPARTMENT, EMPLOYEE WHERE Dnum = Dnumber AND Mgr_ssn = Ssn AND Lname = 'Smith)
					OR
					Pnumber IN
					(SELECT Pno FROM WORKS_ON, EMPLOYEE WHERE Essn = Ssn AND Lname = 'Smith');
					a) Query 4A introduces the comparison operator IN, which compares a value v with a set (or multiset) of values V and evaluates to TRUE if v is one of the elements in V.
					b) The first nested query selects the project numbers of projects that have an employee with last name 'Smith' involved as manager, whereas the second nested query selects the project numbers of projects that have an employee with last name 'Smith' involved as a worker. In the outer query, we use the OR logical connective to retrieve a PROJECT tuple if the PNUMBER value of that tuple is in the result of either nested query.
			ii. If a nested query returns a single attribute and a single tuple, the query result will be a single (scalar) value. In such cases, it is permissible to use = instead of IN for the comparison operator. In general, the nested query will return a table (relation), which is a set or multiset of tuples.
			iii. Example: Query (page 210)
				1) SELECT DISTINCT Essn FROM WORKS_ON WHERE (Pno, Hours) IN
					(SELECT Pno, Hours FROM WORKS_ON WHERE Essn = '123456789');
					a) SQL allows the use of tuples of values in comparisons by placing them within parenthesis.
					b) This query will select the Essns of all employees who work the same (project, hours) combination on some project that employee 'John Smith' (whose Ssn='123456789') works on. In this example, the IN operator compares the subtuple of values in parentheses (Pno, Hours) within each tuple in WORKS_ON with the set of type-compatible tuples produced by the nested query.
			iv. Example: Query (page 210)
				1) SELECT Lname, Fname FROM EMPLOYEE WHERE Salary > ALL
					(SELECT Salary FROM EMPLOYEE WHERE Dno = 5);
					a) This returns the name of employees whose salary is greater than the salary of all the employees in department 5.
			v. In general, we can have several levels of nested queries. We can once again be faced with possible ambiguity among attribute names if attributes of the same name exist - one in a relation in the FROM clause of the outer query, and another in a relation in the FROM clause of the nested query. The rule is that a reference to an unqualified attribute refers to the relation declared in the innermost nested query.
			vi. Example: Query 16
				1) SELECT E.Fname, E.Lname FROM EMPLOYEE AS E WHERE E.Ssn IN
					(SELECT D.Essn FROM DEPENDENT AS D WHERE E.Fname = D.Dependent_name AND E.Sex = D.Sex):
					a) In the nested query of 16, we must qualify E.Sex because it refers to the Sex attribute of EMPLOYEE from the outer query, and DEPENDENT also has an attribute called Sex.
		
		c. Implement a correlated sub-query (Section 7.1.3).
			i. Example: Query 16A
				1) SELECT E.Fname, E.Lname FROM EMPLOYEE AS E, DEPENDENT AS D
				WHERE E.Ssn = D.Essn AND E.Sex = D.Sex AND E.Fname = D.Dependent_name;
					a) Whenever a condition in the WHERE clause if a nested query references some attribute of a relation declared in the outer query, the two queries are said to be correlated. We can understand a correlated query better by considering that the nested query is evaluated once for each tuple (or combination of tuples) in the outer query.
					b) For example, we can think of Query 16 as follows:
						i) For each EMPLOYEE tuple, evaluate the nested query, which retrieves the Essn values for all DEPENDENT tuples with the same sex and name as that EMPLOYEE tuple; if the Ssn value of the EMPLOYEE tuple is in the result of the nested query, then select that EMPLOYEE tuple.
					c) In general, a query written with nested select-from-where blocks and using the = or IN comparison operators can always be expressed as a single block query: Query 16A.
